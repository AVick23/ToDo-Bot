package botfunc

import (
	"database/sql"
	"fmt"
	"strings"

	"github.com/AVick23/ToDo-Bot/complete"
	"github.com/AVick23/ToDo-Bot/deletetask"
	"github.com/AVick23/ToDo-Bot/handlercommand"
	"github.com/AVick23/ToDo-Bot/savetask"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	response  string
	userState = make(map[int64]string)
)

func newInlineKeyboard(text string, command string) tgbotapi.InlineKeyboardButton {
	return tgbotapi.NewInlineKeyboardButtonData(text, command)
}

func NewBot(token string) (*tgbotapi.BotAPI, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É: %v", err)
	}
	bot.Debug = true
	fmt.Printf("–£–¥–∞–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É: %v", bot.Self.UserName)
	return bot, nil
}

func RunProcess(bot *tgbotapi.BotAPI, updates tgbotapi.UpdatesChannel, db *sql.DB) {
	for update := range updates {
		if update.Message != nil {
			processingMessage(bot, update, db)

		} else if update.CallbackQuery != nil {
			processCallbackQuery(bot, update, db)
		}
	}
}

func processingMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *sql.DB) {
	if update.Message.Command() == "start" {
		msg := tgbotapi.NewMessage(
			update.Message.Chat.ID,
			"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. üòä\n"+
				"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ¬´/help¬ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∏–º–≤–æ–ª ¬´/¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥. üöÄ",
		)
		bot.Send(msg)
	} else if update.Message.Command() == "tasks" {
		msg := tgbotapi.NewMessage(
			update.Message.Chat.ID,
			"üìã –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
		)
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				newInlineKeyboard("üìÖ –ú–æ–π –¥–µ–Ω—å", "day"),
				newInlineKeyboard("üóìÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ", "planned"),
			),
			tgbotapi.NewInlineKeyboardRow(
				newInlineKeyboard("‚úÖ –ó–∞–¥–∞—á–∏", "tasks"),
				newInlineKeyboard("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫", "create_list"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	} else if update.Message.Command() == "help" {
		msg := tgbotapi.NewMessage(
			update.Message.Chat.ID,
			"üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"+
				"/start - üëã –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –æ–Ω —É–º–µ–µ—Ç.\n"+
				"/tasks - üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"+
				"/add - ‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.\n"+
				"/help - ‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"+
				"üí° *–°–æ–≤–µ—Ç:* –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–∏–º–≤–æ–ª ¬´/¬ª —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞. üöÄ",
		)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
	} else if update.Message.Command() == "add" {
		msg := tgbotapi.NewMessage(
			update.Message.Chat.ID,
			"‚úèÔ∏è –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É? –ù–∞–ø–∏—à–∏—Ç–µ –µ—ë –Ω–∏–∂–µ, –∏ —è –∑–∞–ø–æ–º–Ω—é! üòâ",
		)
		bot.Send(msg)
		userState[update.Message.Chat.ID] = "state"

	} else if userState[update.Message.Chat.ID] == "state" {
		savetask.SaveTaskUser(bot, update, db)
	}
}

func processCallbackQuery(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *sql.DB) {
	if update.CallbackQuery == nil {
		return
	}

	chatID := update.CallbackQuery.Message.Chat.ID
	username := fmt.Sprintf("%v", update.CallbackQuery.From.ID)
	callbackData := update.CallbackQuery.Data

	switch {
	case strings.HasPrefix(callbackData, "skip_date"):
		savetask.SaveTaskDate(bot, chatID)
	case strings.HasPrefix(callbackData, "skip_time"):
		savetask.SaveTaskTime(bot, chatID, db)
	case strings.HasPrefix(callbackData, "task_"):
		handleTaskAction(bot, update, callbackData[5:])
	case strings.HasPrefix(callbackData, "complete_"):
		complete.CompleteTasks(bot, update, username, callbackData[9:], db)
	case strings.HasPrefix(callbackData, "delete_"):
		deletetask.DeleteTasks(bot, update, username, callbackData[7:], db)
	default:
		handlercommand.HandleDefaultCallback(bot, update, db, username, callbackData)
	}
}

func handleTaskAction(bot *tgbotapi.BotAPI, update tgbotapi.Update, task string) {
	response := fmt.Sprintf(
		"ü§î –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∑–∞–¥–∞—á–µ–π: *%s*?\n"+
			"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ: üëá",
		task,
	)
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			newInlineKeyboard("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", "complete_"+task),
			newInlineKeyboard("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "delete_"+task),
		),
	}
	replyMarkup := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, response)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = replyMarkup
	bot.Send(msg)
}
