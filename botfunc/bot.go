package botfunc

import (
	"database/sql"
	"fmt"
	"log"
	"strings"

	"github.com/AVick23/ToDo-Bot/database"
	"github.com/AVick23/ToDo-Bot/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	response         string
	buttons          [][]tgbotapi.InlineKeyboardButton
	userState        = make(map[int64]string)
	userStateTask    = make(map[int64]string)
	inputDescription = make(map[int64]string)
	inputDate        = make(map[int64]string)
	inputTime        = make(map[int64]string)
)

func newInlineKeyboard(text string, command string) tgbotapi.InlineKeyboardButton {
	return tgbotapi.NewInlineKeyboardButtonData(text, command)
}

func NewBot(token string) (*tgbotapi.BotAPI, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É: %v", err)
	}
	bot.Debug = true
	fmt.Printf("–£–¥–∞–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É: %v", bot.Self.UserName)
	return bot, nil
}

func RunProcess(bot *tgbotapi.BotAPI, updates tgbotapi.UpdatesChannel, db *sql.DB) {
	for update := range updates {
		if update.Message != nil {
			processingMessage(bot, update, db)

		} else if update.CallbackQuery != nil {
			processCallbackQuery(bot, update, db)
		}
	}
}

func processingMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *sql.DB) {
	if update.Message.Command() == "start" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ¬´/help¬ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Å–∏–º–≤–æ–ª ¬´/¬ª. –≠—Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞.")
		bot.Send(msg)
	} else if update.Message.Command() == "tasks" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				newInlineKeyboard("–ú–æ–π –¥–µ–Ω—å", "day"),
				newInlineKeyboard("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ", "planned"),
			),
			tgbotapi.NewInlineKeyboardRow(
				newInlineKeyboard("–ó–∞–¥–∞—á–∏", "tasks"),
				newInlineKeyboard("–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫", "create_list"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	} else if update.Message.Command() == "add" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É?\n –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É: ")
		bot.Send(msg)
		userState[update.Message.Chat.ID] = "state"
	} else if userState[update.Message.Chat.ID] == "state" {
		saveTaskUser(bot, update, db)
	}
}

func saveTaskUser(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *sql.DB) {
	chatID := update.Message.Chat.ID

	if _, ok := userStateTask[chatID]; !ok {
		userStateTask[chatID] = "description"
	}

	switch userStateTask[chatID] {
	case "description":
		handleTaskDescription(bot, update, chatID)
	case "date":
		handleTaskDate(bot, update, chatID)
	case "time":
		handleTaskTime(bot, update, chatID, db)
	}
}

func handleTaskDescription(bot *tgbotapi.BotAPI, update tgbotapi.Update, chatID int64) {
	inputDescription[chatID] = update.Message.Text
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_date"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
	userStateTask[chatID] = "date"
}

func handleTaskDate(bot *tgbotapi.BotAPI, update tgbotapi.Update, chatID int64) {
	saveTaskDate(chatID, update)
	msg := tgbotapi.NewMessage(chatID, "–ê —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º")
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_time"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
	userStateTask[chatID] = "time"
}

func handleTaskTime(bot *tgbotapi.BotAPI, update tgbotapi.Update, chatID int64, db *sql.DB) {
	saveTaskTime(chatID, update)
	userStateTask[chatID] = ""

	task := models.Task{
		Description: strings.TrimSpace(inputDescription[chatID]),
	}

	if inputDate[chatID] != "" {
		date := inputDate[chatID]
		task.Date = &date
	}
	if inputTime[chatID] != "" {
		time := inputTime[chatID]
		task.Time = &time
	}

	username := fmt.Sprintf("%v", chatID)

	id, err := database.SaveUser(db, username)
	if err != nil {
		fmt.Printf("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %v", err)
	}

	err = database.SaveTasks(db, id, task)
	if err != nil {
		response := "–ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
		msg := tgbotapi.NewMessage(chatID, response)
		bot.Send(msg)
		fmt.Printf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ %v", err)
		return
	}

	response := "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: \n‚úçÔ∏è" + task.Description
	if task.Date != nil {
		response += "\nüóìÔ∏è" + *task.Date
	}
	if task.Time != nil {
		response += "\nüï∞Ô∏è" + *task.Time
	}
	msg := tgbotapi.NewMessage(chatID, response)
	bot.Send(msg)
}

func saveTaskDate(chatID int64, update tgbotapi.Update) {
	if update.CallbackQuery != nil && update.CallbackQuery.Data == "skip_date" {
		inputDate[chatID] = ""
	}
	userStateTask[chatID] = "time"
}

func saveTaskTime(chatID int64, update tgbotapi.Update) {
	if update.CallbackQuery != nil && update.CallbackQuery.Data == "skip_time" {
		inputTime[chatID] = ""
	}
}

func processCallbackQuery(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *sql.DB) {
	if update.CallbackQuery == nil {
		return
	}

	username := fmt.Sprintf("%v", update.CallbackQuery.From.ID)
	callbackData := update.CallbackQuery.Data

	switch {
	case strings.HasPrefix(callbackData, "task_"):
		handleTaskAction(bot, update, callbackData[5:])
	case strings.HasPrefix(callbackData, "complete_"):
		completeTasks(bot, update, username, callbackData[9:], db)
	case strings.HasPrefix(callbackData, "delete_"):
		deleteTasks(bot, update, username, callbackData[7:], db)
	default:
		handleDefaultCallback(bot, update, db, username, callbackData)
	}
}

func handleDefaultCallback(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *sql.DB, username string, callbackData string) {
	tasks, err := database.GetTasks(db, username)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: %v", err)
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
		bot.Send(msg)
		return
	}

	buttons = [][]tgbotapi.InlineKeyboardButton{}

	switch callbackData {
	case "day":
		response = "–≠—Ç–æ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
	case "planned":
		response = "–≠—Ç–æ –≤–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
	case "tasks":
		response = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á"
		for _, task := range tasks {
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(task, "task_"+task),
			))
		}
	case "create_list":
		response = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞"
	}

	if len(buttons) > 0 {
		replyMarkup := tgbotapi.NewInlineKeyboardMarkup(buttons...)
		msg := tgbotapi.NewEditMessageReplyMarkup(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Message.MessageID, replyMarkup)
		bot.Send(msg)
	} else {
		replyMarkup := tgbotapi.NewInlineKeyboardMarkup([]tgbotapi.InlineKeyboardButton{})
		msg := tgbotapi.NewEditMessageReplyMarkup(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Message.MessageID, replyMarkup)
		bot.Send(msg)

		noTask := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á —Å–µ–π—á–∞—Å –ø—É—Å—Ç")
		bot.Send(noTask)
	}
}

func handleTaskAction(bot *tgbotapi.BotAPI, update tgbotapi.Update, task string) {
	response = fmt.Sprintf("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∑–∞–¥–∞—á–µ–π: %s?", task)
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			newInlineKeyboard("–í—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É", "complete_"+task),
			newInlineKeyboard("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "delete_"+task),
		),
	}
	replyMarkup := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = replyMarkup
	bot.Send(msg)
}

func completeTasks(bot *tgbotapi.BotAPI, update tgbotapi.Update, username string, task string, db *sql.DB) {
	err := database.CompleteTasksDB(db, username, task)
	if err != nil {
		response := "–ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, response)
		bot.Send(msg)
		log.Printf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %v", err)
		return
	}

	response := fmt.Sprintf("–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: (%v)", task)
	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, response)
	bot.Send(msg)
}

func deleteTasks(bot *tgbotapi.BotAPI, update tgbotapi.Update, username string, task string, db *sql.DB) {
	err := database.DeleteTaskSQL(db, task, username)
	if err != nil {
		response := "–ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, response)
		bot.Send(msg)
		log.Printf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %v", err)
		return
	}

	response := fmt.Sprintf("–í–∞—à–∞ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞: (%v)", task)
	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, response)
	bot.Send(msg)
}
