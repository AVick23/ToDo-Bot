package savetask

import (
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/AVick23/ToDo-Bot/database"
	"github.com/AVick23/ToDo-Bot/models"
	"github.com/AVick23/ToDo-Bot/valid"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	userStateTask    = make(map[int64]string)
	inputDescription = make(map[int64]string)
	inputDate        = make(map[int64]string)
	inputTime        = make(map[int64]string)
)

func SaveTaskUser(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *sql.DB) {
	chatID := update.Message.Chat.ID

	if _, ok := userStateTask[chatID]; !ok {
		userStateTask[chatID] = "description"
	}

	switch userStateTask[chatID] {
	case "description":
		handleTaskDescription(bot, update, chatID)
	case "date":
		handleTaskDate(bot, update, chatID)
	case "time":
		handleTaskTime(bot, update, chatID, db)
	}
}

func handleTaskDescription(bot *tgbotapi.BotAPI, update tgbotapi.Update, chatID int64) {
	inputDescription[chatID] = update.Message.Text
	msg := tgbotapi.NewMessage(chatID, "üìÖ –î–∞–≤–∞–π –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–≤–æ—é –∑–∞–¥–∞—á—É! –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–¥.–º–º.–≥–≥–≥–≥* –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'. üòä")
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_date"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
	userStateTask[chatID] = "date"
}

func handleTaskDate(bot *tgbotapi.BotAPI, update tgbotapi.Update, chatID int64) {
	input := update.Message.Text
	parseDate, err := time.Parse("02.01.2006", input)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ö†Ô∏è –£–ø—Å, –∫–∞–∂–µ—Ç—Å—è —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: *–¥–¥.–º–º.–≥–≥–≥–≥*. üòâ")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_date"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	today := time.Now().Truncate(24 * time.Hour)

	if parseDate.Before(today) {
		msg := tgbotapi.NewMessage(chatID, "üö´ –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòä")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_date"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	inputDate[chatID] = input

	msg := tgbotapi.NewMessage(chatID, "‚è∞ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *—á—á:–º–º*, –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_time"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)

	userStateTask[chatID] = "time"
}

func handleTaskTime(bot *tgbotapi.BotAPI, update tgbotapi.Update, chatID int64, db *sql.DB) {
	input := update.Message.Text
	parseTime, err := time.Parse("15:04", input)

	if err != nil || !valid.IsValidTime(parseTime) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ö†Ô∏è –•–º–º, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *—á—á:–º–º*. üôÉ")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_time"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	today := time.Now().Format("02.01.2006")
	if inputTime[chatID] == today && parseTime.Before(time.Now()) {
		msg := tgbotapi.NewMessage(chatID, "üö´ –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ—à–ª–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üòâ")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_time"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	inputTime[chatID] = input
	userStateTask[chatID] = ""

	task := models.Task{
		Description: strings.TrimSpace(inputDescription[chatID]),
	}

	if inputDate[chatID] != "" {
		date := inputDate[chatID]
		task.Date = &date
	}
	if inputTime[chatID] != "" {
		time := inputTime[chatID]
		task.Time = &time
	}

	username := fmt.Sprintf("%v", chatID)

	id, err := database.SaveUser(db, username)
	if err != nil {
		fmt.Printf("üòü –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	err = database.SaveTasks(db, id, task)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
		bot.Send(msg)
		fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: %v", err)
		return
	}

	response := "üéâ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n‚úçÔ∏è *" + task.Description + "*"
	if task.Date != nil {
		response += "\nüóìÔ∏è –î–∞—Ç–∞: *" + *task.Date + "*"
	}
	if task.Time != nil {
		response += "\nüï∞Ô∏è –í—Ä–µ–º—è: *" + *task.Time + "*"
	}
	msg := tgbotapi.NewMessage(chatID, response)
	bot.Send(msg)

	clearTaskState(chatID)
}

func SaveTaskDate(bot *tgbotapi.BotAPI, chatID int64) {
	if userStateTask[chatID] != "date" {
		return
	}
	inputDate[chatID] = ""
	msg := tgbotapi.NewMessage(chatID, "‚è∞ –•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *—á—á:–º–º*, –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_time"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
	userStateTask[chatID] = "time"
}

func SaveTaskTime(bot *tgbotapi.BotAPI, chatID int64, db *sql.DB) {
	if userStateTask[chatID] != "time" {
		return
	}

	inputTime[chatID] = ""

	userStateTask[chatID] = ""

	task := models.Task{
		Description: strings.TrimSpace(inputDescription[chatID]),
	}

	if inputDate[chatID] != "" {
		date := inputDate[chatID]
		task.Date = &date
	}
	if inputTime[chatID] != "" {
		time := inputTime[chatID]
		task.Time = &time
	}

	username := fmt.Sprintf("%v", chatID)
	id, err := database.SaveUser(db, username)
	if err != nil {
		fmt.Printf("üòü –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: %v", err)
		return
	}

	err = database.SaveTasks(db, id, task)
	if err != nil {
		response := "üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
		bot.Send(tgbotapi.NewMessage(chatID, response))
		fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: %v", err)
		return
	}

	response := "üéâ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n‚úçÔ∏è *" + task.Description + "*"
	if task.Date != nil {
		response += fmt.Sprintf("\nüóìÔ∏è –î–∞—Ç–∞: *%s*", *task.Date)
	}
	if task.Time != nil {
		response += fmt.Sprintf("\nüï∞Ô∏è –í—Ä–µ–º—è: *%s*", *task.Time)
	}
	bot.Send(tgbotapi.NewMessage(chatID, response))

	clearTaskState(chatID)
}

func clearTaskState(chatID int64) {
	delete(inputDescription, chatID)
	delete(inputDate, chatID)
	delete(inputTime, chatID)
	delete(userStateTask, chatID)
}
