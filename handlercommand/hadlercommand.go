package handlercommand

import (
	"database/sql"
	"fmt"
	"log"
	"math/rand"
	"time"

	"github.com/AVick23/ToDo-Bot/database"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	response  string
	buttons   [][]tgbotapi.InlineKeyboardButton
	emojiList = []string{"üòä", "üöÄ", "‚ú®", "üåü", "üí°", "‚úÖ", "üìÖ", "üìå", "üïí", "üéØ"}
)

func HandleDefaultCallback(bot *tgbotapi.BotAPI, update tgbotapi.Update, db *sql.DB, username string, callbackData string) {

	tasks, err := database.GetTasks(db, username)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: %v", err)
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
		bot.Send(msg)
		return
	}

	tasksplan, err := database.GetTasksPlanned(db, username)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: %v", err)
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return
	}

	taskday, err := database.GetTasksDay(db, username)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: %v", err)
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return
	}

	buttons = [][]tgbotapi.InlineKeyboardButton{}

	switch callbackData {
	case "day":
		response = "üìÖ *–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
		for _, task := range taskday {
			buttonText := fmt.Sprintf("%s %s (–¥–æ %s)", getRandomEmoji(), task.Task, task.Date)
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, "task_"+task.Task),
			))
		}
	case "planned":
		response = "üóìÔ∏è *–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n"
		for _, task := range tasksplan {
			buttonText := fmt.Sprintf("%s %s (–¥–æ %s)", getRandomEmoji(), task.Task, task.Date)
			if task.Notification.Valid {
				buttonText += fmt.Sprintf(" üîî %s", task.Notification.String)
			}
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, "task_"+task.Task),
			))
		}
	case "tasks":
		response = "üìã *–í–æ—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n"
		for _, task := range tasks {
			buttonText := fmt.Sprintf("%s %s", getRandomEmoji(), task)
			buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, "task_"+task),
			))
		}
	case "create_list":
		response = "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:"
	}

	if len(buttons) > 0 {
		replyMarkup := tgbotapi.NewInlineKeyboardMarkup(buttons...)
		msg := tgbotapi.NewEditMessageTextAndMarkup(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Message.MessageID, response, replyMarkup)
		bot.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "‚ÑπÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
		bot.Send(msg)
	}
}

func getRandomEmoji() string {
	rand.Seed(time.Now().UnixNano())
	return emojiList[rand.Intn(len(emojiList))]
}
